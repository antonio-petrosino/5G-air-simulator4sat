   5G-air-simulator CHANGELOG
===================================================

This file contains 5G-air-simulator changelog for 
satellite scenario implementation.

example: 
./5G-air-simulator nbCell-Sat sat 1 20000 0.3 3000 20 1 15 1 1000 32 15 1 1 10 4 8 48 3000 12 256 25

====================================================
- File aggiunti:
---------------------------------------------------
1) Scenario -> nb-cell-sat.h 
//Descrizione dello scenario satellitare
// definita la distanza della UE minima per effettuare la selezione della cella
// scelta in base all'SNR > 0 in downlink

2) Mobility  -> Satellite.h/cpp
	     -> Ue_Satellite.h/cpp
//Implementazione mobilità base station

3) Mobility -> SatelliteCoordinate.h
// Definizione delle coord. sat. con scenario:
	// area 			= 30 ettari
	// altezza satellite 		= 500km
	// tempo visibilità		= 120 secondi
	// periodicità sat.		= 1 ogni 48 min
====================================================
- Modifiche a file esistenti:
----------------------------------------------------
1) Device -> UserEquipment.cpp -> UpdateUserPosition()
//Gestione distanza UE -> gNB
	//Solo nel caso satellitare:
	//	DETACH if distanza > distanza_massima_da_satellite
	//	else 
	//	ATTACH
	
2) Device -> NetworkNode -> MakeActive()
// Check sulla distanza fra UE e gNB prima dell'awake
// forzato

3) Phy -> nbiot-simple-error-model.h/cpp
// Definizione per lo scenario di riferimento
// Calcolo SNR in base all'angolo di elevazione

4) Phy -> BLERTrace -> BLERvsSINR_NBIoT_SAT.h
// Gestione delle curve BLER di riferimento

5) core -> Bandwidth-manager.h/cpp 
// Modifica Low-High freq.
// aggiunta metodo bool GetNBIoTenabled()

6) channel -> channel-realization.h/cpp
// Aggiunta def: CHANNEL_MODEL_SATELLITE
// da inserire m_pathLoss output del D1
// !!!!!!!!!!!!
// creazione del modello del total_loss!!!

6a) channel -> RadioChannel.cpp
// inserita estensione 0.001 x NRep

6b) channel -> propagation loss model -> propagation-loss-model.cpp
// Calcolo della potenza ricevuta del segnale con la formula del link budget

7) protocolStack -> mac -> random-access -> ue-nb-iot-random-accss.h/cpp
// StartRaProcedure() -> è stato inserito un controllo sulla distanza dalla BS
// ReStartRaProcedure() -> è stato inserito un controllo sulla distanza dalla BS

8) protocolStack -> mac -> packet-scheduler -> packet-scheduler ->
nb-roundrobin-uplink-packet-scheduler.cpp
// RUsAllocation() -> ttiLength * NRep <-> ttiLength

9) componentManager -> FrameManager.cpp 
// Inserito set/getNRep
// Inserita Set/GetMCSNBIoTSat() per fissare il numero di MCS da linea di comando
// Inserita gestione dell'MCS ed NRU forzato

10) phy -> phy.h/cpp
// inserita variabile globale 
// m_maxSatelliteRange -> metri di visibilità

12) nb-roundrobin-uplink-packet-scheduler.cpp/h
// Get MCS ed NRU da FrameManager

13) phy -> gnb-phy.cpp
// Inserito calcolo SNR scenario satellitare
// Link budget - rumore in db (SNR = LB - N)

